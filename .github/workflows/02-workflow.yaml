# This workflow builds a Python Lambda function and deploys it with Pulumi.
name: Build and Deploy Lambda with Pulumi

# Controls when the action will run.
# Triggers the workflow on push events but only for the main branch.
on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering of the workflow

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # -------------------------------------------------
  # Job 1: Build the Lambda ZIP file
  # -------------------------------------------------
  build:
    name: Build Lambda ZIP
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Sets up the Python version
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: 3.13

      # Creates the zip file containing the lambda code
      # Assumes your lambda function code is in a 'lambda' directory.
      - name: Create Lambda ZIP file
        run: |
          echo "Zipping lambda function code..."
          zip -r lambda.zip ./lambda

      # Uploads the zip file as an artifact to be used in the next job
      - name: Upload Lambda ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-zip
          path: lambda.zip

  # -------------------------------------------------
  # Job 2: Deploy the Lambda using Pulumi
  # -------------------------------------------------
  deploy:
    name: Deploy with Pulumi
    runs-on: ubuntu-latest
    needs: build # This job will only run after the 'build' job is successful

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Configure AWS credentials using Access Key and Secret Key
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # The AWS Access Key ID.
          # Stored as a secret in GitHub repository settings.
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # The AWS Secret Access Key.
          # Stored as a secret in GitHub repository settings.
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # The AWS region to deploy to.
          # Stored as a secret in GitHub repository settings.
          aws-region: ${{ secrets.AWS_REGION }}

      # Download the lambda.zip file created in the 'build' job
      - name: Download Lambda ZIP artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-zip

      # Install Pulumi CLI
      - name: Install Pulumi
        uses: pulumi/actions@v5

      # Set up the Python version for the Pulumi program
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: 3.13

      # Install Python dependencies for the Pulumi project
      - name: Install Pulumi Dependencies
        run: pip install -r requirements.txt

      # Log in to the Pulumi S3 backend.
      # Pulumi will automatically create the folder (prefix) in S3 if it doesn't exist.
      - name: Login to Pulumi S3 Backend
        run: pulumi login s3://${{ secrets.PULUMI_S3_BUCKET }}/${{ secrets.PULUMI_STATE_FOLDER }}
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # Select the stack. The --create flag creates the stack if it does not exist.
      - name: Select Pulumi Stack
        run: pulumi stack select dev --create

      # Run `pulumi up` to preview and deploy changes.
      # The --yes flag automatically approves the changes.
      - name: Run Pulumi Up
        run: pulumi up --yes
